<Protocol xmlns="http://www.skyline.be/validatorProtocolUnitTest">
	<Name>FillArrayWithColumns_Valid</Name>
	<Version>1.0.0.1</Version>

	<Params>
		<Param id="100">
			<Name>SNMP</Name>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="101" type="snmp" options=""/>
				<ColumnOption idx="1" pid="102" type="snmp" options=""/>
				<ColumnOption idx="2" pid="103" type="snmp" options=""/>
				<ColumnOption idx="3" pid="104" type="custom" options=""/>
				<ColumnOption idx="4" pid="105" type="custom" options=""/>
				<ColumnOption idx="5" pid="106" type="snmp" options=""/>
				<ColumnOption idx="6" pid="107" type="retrieved" options=""/>
				<ColumnOption idx="7" pid="108" type="retrieved" options=""/>
			</ArrayOptions>
		</Param>
		<Param id="101">
			<Name>SNMP_Instance</Name>
			<Type>read</Type>
		</Param>
		<Param id="102">
			<Name>SNMP_Column2_SNMP</Name>
			<Type>read</Type>
		</Param>
		<Param id="103">
			<Name>SNMP_Column3_SNMP</Name>
			<Type>read</Type>
		</Param>
		<Param id="104">
			<Name>SNMP_Column4_Custom</Name>
			<Type>read</Type>
		</Param>
		<Param id="105">
			<Name>SNMP_Column5_Custom</Name>
			<Type>read</Type>
		</Param>
		<Param id="106">
			<Name>SNMP_Column6_SNMP</Name>
			<Type>read</Type>
		</Param>
		<Param id="107">
			<Name>SNMP_Column7_Retrieved</Name>
			<Type>read</Type>
		</Param>
		<Param id="108">
			<Name>SNMP_Column8_Retrieved</Name>
			<Type>read</Type>
		</Param>
		
		<Param id="1000">
			<Name>NoHistorySet</Name>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="1001" type="retrieved" options=""/>
				<ColumnOption idx="1" pid="1002" type="retrieved" options=""/>
				<ColumnOption idx="2" pid="1003" type="retrieved" options=""/>
			</ArrayOptions>
		</Param>
		<Param id="1001">
			<Name>NoHistorySet_Instance</Name>
			<Type>read</Type>
		</Param>
		<Param id="1002">
			<Name>NoHistorySet_Column2</Name>
			<Type>read</Type>
		</Param>
		<Param id="1003">
			<Name>NoHistorySet_Column3</Name>
			<Type>read</Type>
		</Param>

		<Param id="1100">
			<Name>HistorySetFalse</Name>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="1101" type="retrieved" options=""/>
				<ColumnOption idx="1" pid="1102" type="retrieved" options=""/>
				<ColumnOption idx="2" pid="1103" type="retrieved" options=""/>
			</ArrayOptions>
		</Param>
		<Param id="1101" historySet="false">
			<Name>HistorySetFalse_Instance</Name>
			<Type>read</Type>
		</Param>
		<Param id="1102" historySet="false">
			<Name>HistorySetFalse_Column2</Name>
			<Type>read</Type>
		</Param>
		<Param id="1103" historySet="false">
			<Name>HistorySetFalse_Column3</Name>
			<Type>read</Type>
		</Param>

		<Param id="2000">
			<Name>HistorySetTrue</Name>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="2001" type="retrieved" options=""/>
				<ColumnOption idx="1" pid="2002" type="retrieved" options=""/>
				<ColumnOption idx="2" pid="2003" type="retrieved" options=""/>
			</ArrayOptions>
		</Param>
		<Param id="2001">
			<Name>HistorySetTrue_Instance</Name>
			<Type>read</Type>
		</Param>
		<Param id="2002" historySet="true">
			<Name>HistorySetTrue_Column2</Name>
			<Type>read</Type>
		</Param>
		<Param id="2003" historySet="true">
			<Name>HistorySetTrue_Column3</Name>
			<Type>read</Type>
		</Param>

		<Param id="9999">
			<Name>DVEs_DisplayKey</Name>
			<Type>read</Type>
		</Param>
		<Param id="10000">
			<Name>DVEs</Name>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="10001" type="retrieved" options=""/>
				<ColumnOption idx="1" pid="10002" type="retrieved" options=""/>
				<ColumnOption idx="2" pid="10003" type="retrieved" options=";element"/>
				<ColumnOption idx="3" pid="10004" type="state" options=""/>
				<ColumnOption idx="4" pid="10005" type="retrieved" options=""/>
				<ColumnOption idx="5" pid="10006" type="retrieved" options=""/>
				<ColumnOption idx="6" pid="9999" type="displaykey" options=""/>
			</ArrayOptions>
		</Param>
		<Param id="10001">
			<Name>DVEs_Instance</Name>
			<Type>read</Type>
		</Param>
		<Param id="10002">
			<Name>DVEs_Column2</Name>
			<Type>read</Type>
		</Param>
		<Param id="10003">
			<Name>DVEs_Column3_DveElement</Name>
			<Type>read</Type>
		</Param>
		<Param id="10004">
			<Name>DVEs_Column4_State</Name>
			<Type>read</Type>
		</Param>
		<Param id="10005">
			<Name>DVEs_Column5_DeleteButton</Name>
			<Type>write</Type>
			<Measurement>
				<Type>button</Type>
			</Measurement>
		</Param>
		<Param id="10006" historySet="true">
			<Name>DVEs_Column6_WithHistorySet</Name>
			<Type>read</Type>
		</Param>

		<Param id="11000">
			<Name>MultiThreading</Name>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="11001" type="retrieved" options=""/>
				<ColumnOption idx="1" pid="11002" type="retrieved" options=""/>
				<ColumnOption idx="2" pid="11003" type="retrieved" options=""/>
				<ColumnOption idx="3" pid="11004" type="retrieved" options=""/>
				<ColumnOption idx="4" pid="11005" type="retrieved" options=""/>
				<ColumnOption idx="5" pid="11006" type="retrieved" options=""/>
				<ColumnOption idx="6" pid="11007" type="retrieved" options=""/>
				<ColumnOption idx="7" pid="11008" type="retrieved" options=""/>
			</ArrayOptions>
		</Param>
		<Param id="11001">
			<Name>MultiThreading_Instance</Name>
			<Type>read</Type>
		</Param>
		<Param id="11002">
			<Name>MultiThreading_IpAddress</Name>
			<Type>read</Type>
		</Param>
		<Param id="11003">
			<Name>MultiThreading_RTT</Name>
			<Type>read</Type>
		</Param>
		<Param id="11004">
			<Name>MultiThreading_Timestamp</Name>
			<Type>read</Type>
		</Param>
		<Param id="11005">
			<Name>MultiThreading_Jitter</Name>
			<Type>read</Type>
		</Param>
		<Param id="11006">
			<Name>MultiThreading_Latency</Name>
			<Type>read</Type>
		</Param>
		<Param id="11007">
			<Name>MultiThreading_PacketLossRate</Name>
			<Type>read</Type>
		</Param>
		<Param id="11008" historySet="true">
			<Name>MultiThreading_ColumnWithHistorySet</Name>
			<Type>read</Type>
		</Param>
	</Params>

	<QActions>
		<QAction id="1" name="PreCompile" encoding="csharp" options="precompile">
			<![CDATA[using System;

using Skyline.DataMiner.Scripting;

namespace Skyline.Protocol
{
	namespace MyNamespace
	{
		public static class MyClass
		{
			public static void FillArrayWithColumnsWrapper(this SLProtocol protocol, int tablePid, int columnPid, object[] keys, object[] values)
			{
				protocol.FillArrayWithColumn(tablePid, columnPid, keys, values);
			}

			public static void FillArrayWithColumnsWrapper(this SLProtocol protocol, int tablePid, int columnPid, object[] keys, object[] values, DateTime timeInfo)
			{
				protocol.FillArrayWithColumn(tablePid, columnPid, keys, values, timeInfo);
			}

			//// To keep for possibley future check on NotifyProtocol_220
			//public static void FillArrayWithColumnsWrapper(this SLProtocol protocol, object[] columnPids, object[] columnValues)
			//{
			//	protocol.NotifyProtocol(220, columnPids, columnValues);
			//}

			//public static void FillArrayWithColumnsWrapper(this SLProtocol protocol, object[] columnPids, object[] columnValues, bool overideBehavior)
			//{
			//	object[] columnPidsAndOptions = new object[columnPids.Length + 1];
			//	for (int i = 0; i < columnPids.Length; i++)
			//	{
			//		columnPidsAndOptions[i] = columnPids[i];
			//	}

			//	columnPidsAndOptions[columnPidsAndOptions.Length - 1] = overideBehavior;

			//	protocol.NotifyProtocol(220, columnPidsAndOptions, columnValues);
			//}

			//public static void FillArrayWithColumnsWrapper(this SLProtocol protocol, object[] columnPids, object[] columnValues, DateTime timeInfo)
			//{
			//	object[] columnPidsAndOptions = new object[columnPids.Length + 1];
			//	for (int i = 0; i < columnPids.Length; i++)
			//	{
			//		columnPidsAndOptions[i] = columnPids[i];
			//	}

			//	columnPidsAndOptions[columnPidsAndOptions.Length - 1] = timeInfo;

			//	protocol.NotifyProtocol(220, columnPidsAndOptions, columnValues);
			//}

			//public static void FillArrayWithColumnsWrapper(this SLProtocol protocol, object[] columnPids, object[] columnValues, bool overideBehavior, DateTime timeInfo)
			//{
			//	object[] columnPidsAndOptions = new object[columnPids.Length + 1];
			//	for (int i = 0; i < columnPids.Length; i++)
			//	{
			//		columnPidsAndOptions[i] = columnPids[i];
			//	}

			//	columnPidsAndOptions[columnPidsAndOptions.Length - 1] = new object[] { overideBehavior, timeInfo };

			//	protocol.NotifyProtocol(220, columnPidsAndOptions, columnValues);
			//}
		}

		public static class MyParams
		{
			public const int MyTable_1000 = 1000;
			public const int MyTable_1100 = 1100;
			public const int MyTable_2000 = 2000;
		}
	}
}]]>
		</QAction>
		
		<QAction id="100" name="SNMP" encoding="csharp" triggers="100">
			<![CDATA[using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: SNMP.
/// </summary>
public static class QAction
{
	public static void Run(SLProtocol protocol)
	{
		bool useClearAndLeaveTrue = true;
		bool useClearAndLeaveFalse = false;
		DateTime date_dt = new DateTime(2008, 8, 29, 19, 27, 15);

		object[] primaryKeys = { "PK_1", "PK_2", "PK_3", "PK_4", "PK_5" };
		object[] column2Values = { "Value_1", "Value_2", "Value_3", "Value_4", "Value_5" };
		object[] column3Values = { "Value_1", "Value_2", protocol.Clear, null, protocol.Leave };

		protocol.NotifyProtocol(220, new object[] { Parameter.Snmp.tablePid, Parameter.Snmp.Pid.snmp_column7_retrieved }, new object[] { primaryKeys, column2Values });
		protocol.NotifyProtocol(220, new object[] { Parameter.Snmp.tablePid, Parameter.Snmp.Pid.snmp_column8_retrieved_108, Parameter.Snmp.Pid.snmp_column7_retrieved }, new object[] { primaryKeys, column2Values, column3Values });
	}
}]]>
		</QAction>
		
		<QAction id="1000" name="NoHistorySets" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System;

using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

/// <summary>
/// DataMiner QAction Class: NoHistorySets.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		object[] keys = { "PK_1", "PK_2", "PK_3" };
		object[] values = { "Value_1", "Value_2", "Value_3" };

		protocol.FillArrayWithColumn(Parameter.Nohistoryset.tablePid, Parameter.Nohistoryset.Pid.nohistoryset_column2, keys, values);
		protocol.FillArrayWithColumn(Parameter.Historysetfalse.tablePid, Parameter.Historysetfalse.Pid.historysetfalse_column3, keys, values, null);
		
		// Not yet covered
		protocol.FillArrayWithColumnsWrapper(Parameter.Nohistoryset.tablePid, Parameter.Nohistoryset.Pid.nohistoryset_column2_1002, keys, values);
	}
}]]>
		</QAction>
		<QAction id="2000" name="HistorySets" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System;

using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

/// <summary>
/// DataMiner QAction Class: HistorySets.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		DateTime date_dt = new DateTime(2008, 8, 29, 19, 27, 15);
		object[] keys = { "PK_1", "PK_2", "PK_3" };
		object[] values = { "Value_1", "Value_2", "Value_3" };

		protocol.FillArrayWithColumn(Parameter.Historysettrue.tablePid, Parameter.Historysettrue.Pid.historysettrue_column3, keys, values, date_dt);

		protocol.FillArrayWithColumnsWrapper(Parameter.Historysettrue.tablePid, Parameter.Historysettrue.Pid.historysettrue_column3, keys, values, date_dt);
	}
}]]>
		</QAction>
		<QAction id="10000" name="DVEs" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System;

using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

/// <summary>
/// DataMiner QAction Class: DVEs.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		DateTime date_dt = new DateTime(2008, 8, 29, 19, 27, 15);
		object[] keys = { "PK_1", "PK_2", "PK_3" };
		object[] values = { "Value_1", "Value_2", "Value_3" };

		protocol.FillArrayWithColumn(Parameter.Dves.tablePid, Parameter.Dves.Pid.dves_column2, keys, values);
		protocol.FillArrayWithColumn(Parameter.Dves.tablePid, Parameter.Dves.Pid.dves_column6_withhistoryset_10006, keys, values, date_dt);
	}
}]]>
		</QAction>
		<QAction id="11000" name="MultiThreading" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System;

using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

/// <summary>
/// DataMiner QAction Class: MultiThreading.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		DateTime date_dt = new DateTime(2008, 8, 29, 19, 27, 15);
		object[] keys = { "PK_1", "PK_2", "PK_3" };
		object[] values = { "Value_1", "Value_2", "Value_3" };

		protocol.FillArrayWithColumn(Parameter.Multithreading.tablePid, Parameter.Multithreading.Pid.multithreading_ipaddress, keys, values);
		protocol.FillArrayWithColumn(Parameter.Multithreading.tablePid, Parameter.Multithreading.Pid.multithreading_columnwithhistoryset_11008, keys, values, date_dt);
	}
}]]>
		</QAction>
	</QActions>

	<Timers>
		<Timer id="1" options="ip:11000,1;each:1000;threadPool:10;typo;ping:rttColumn=3,ttl=250,timeout=500,timestampColumn=4,type=icmp,size=100,continueSnmpOnTimeout=true,jitterColumn=5,latencyColumn=6,packetLossRateColumn=7,amountPacketsMeasurements=100">
			<Name>MultiThreaded Timer</Name>
		</Timer>
	</Timers>

</Protocol>