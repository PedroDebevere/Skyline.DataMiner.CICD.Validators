<Protocol xmlns="http://www.skyline.be/validatorProtocolUnitTest">
	<Name>CSharpNotifyDataMinerNTTrendingAssignTemplate_DeltIncompatible</Name>
	<Version>1.0.0.1</Version>

	<QActions>
		<QAction id="1" name="PreCompile" encoding="csharp" options="precompile">
			<![CDATA[using Skyline.DataMiner.Scripting;

namespace Skyline.Protocol
{
	namespace MyNamespace
	{
		public static class MyClass
		{
			public const int NT_TRENDING_ASSIGN_TEMPLATE_GlobalConst = 14;
		}
	}
}]]>
		</QAction>

		<QAction id="100" name="Defining_NotifyType" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using Skyline.DataMiner.Net.Messages;
using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		const int NT_TRENDING_ASSIGN_TEMPLATE_Const = 14;
		int NT_TRENDING_ASSIGN_TEMPLATE_Int = 14;
		int NT_TRENDING_ASSIGN_TEMPLATE_Math = 10;

		uint elementId = 661;
		uint[] elementDetails = { elementId };

		string[] trendTemplate = new string[] { "Template 1" };

		// Different ways to define NT
		protocol.NotifyDataMiner(14, elementDetails, trendTemplate);
		protocol.NotifyDataMiner(10 + 10 - 6, elementDetails, trendTemplate);

		protocol.NotifyDataMiner(NT_TRENDING_ASSIGN_TEMPLATE_Const, elementDetails, trendTemplate);
		protocol.NotifyDataMiner(NT_TRENDING_ASSIGN_TEMPLATE_Int, elementDetails, trendTemplate);
		//protocol.NotifyDataMiner(NT_TRENDING_ASSIGN_TEMPLATE_Math + 4, elementDetails, pid);
		protocol.NotifyDataMiner(MyClass.NT_TRENDING_ASSIGN_TEMPLATE_GlobalConst, elementDetails, trendTemplate);

		protocol.NotifyDataMiner((int)NT_TRENDING_ASSIGN_TEMPLATE_Const, elementDetails, trendTemplate);
		protocol.NotifyDataMiner((int)NT_TRENDING_ASSIGN_TEMPLATE_Int, elementDetails, trendTemplate);
		//protocol.NotifyDataMiner((int)NT_TRENDING_ASSIGN_TEMPLATE_Math + 4, elementDetails, pid);
		protocol.NotifyDataMiner((int)MyClass.NT_TRENDING_ASSIGN_TEMPLATE_GlobalConst, elementDetails, trendTemplate);
		protocol.NotifyDataMiner((int)NotifyType.TrendingAssignTemplate, elementDetails, trendTemplate);
		protocol.NotifyDataMiner((int)NotifyType.TrendingAssigneTemplate, elementDetails, trendTemplate);
		
		protocol.NotifyDataMinerQueued(14, elementDetails, trendTemplate);
	}
}]]>
		</QAction>
		<QAction id="101" name="Defining_Element" encoding="csharp">
			<![CDATA[using Skyline.DataMiner.Scripting;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		uint elementId = 661;
		int elementId_int = 661;
		string elementId_string = "661";

		uint[] elementDetails = { elementId };
		uint[] elementDetails_hardcoded = { 2 };

		uint[] elementDetails_multiline;
		elementDetails_multiline = new uint[] { 2 };

		string[] trendTemplate = new string[] { "Template 1" };

		// Different ways to define the parameter
		protocol.NotifyDataMiner(14, 2, trendTemplate);
		protocol.NotifyDataMiner(14, elementId, trendTemplate);
		protocol.NotifyDataMiner(14, elementId_int, trendTemplate);
		protocol.NotifyDataMiner(14, elementId_string, trendTemplate);

		protocol.NotifyDataMiner(14, new[] { 2 }, trendTemplate);
		protocol.NotifyDataMiner(14, new uint[] { 2 }, trendTemplate);
		protocol.NotifyDataMiner(14, new[] { elementId }, trendTemplate);
		protocol.NotifyDataMiner(14, new uint[] { elementId }, trendTemplate);

		protocol.NotifyDataMiner(14, elementDetails, trendTemplate);
		protocol.NotifyDataMiner(14, elementDetails_hardcoded, trendTemplate);
		//protocol.NotifyDataMiner(14, elementDetails_multiline, pid);
	}
}]]>
		</QAction>
	</QActions>

</Protocol>