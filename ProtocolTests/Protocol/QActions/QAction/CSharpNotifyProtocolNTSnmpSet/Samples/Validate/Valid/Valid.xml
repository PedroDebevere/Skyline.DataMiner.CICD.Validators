<Protocol xmlns="http://www.skyline.be/validatorProtocolUnitTest">
	<Name>CSharpNotifyProtocolNTSnmpSet_Valid</Name>
	<Version>1.0.0.1</Version>

	<QActions>
		<QAction id="1" name="PreCompile" encoding="csharp" options="precompile">
			<![CDATA[using Skyline.DataMiner.Scripting;

namespace Skyline.Protocol
{
	namespace MyNamespace
	{
		public static class MyClass
		{
			public const int NT_SNMP_SET_GlobalConst = 292;
		}
	}
}]]>
		</QAction>

		<QAction id="100" name="Defining_NotifyType" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using Skyline.DataMiner.Net.Messages;
using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		const int NT_SNMP_SET_Const = 292;
		int NT_SNMP_SET_Int = 292;
		int NT_SNMP_SET_Math = 290;

		int dmaId = 200;
		int elementId = 661;
		int connectionId = 0;
		string ipPort = "127.0.0.1";
		string setCommunityString = null;
		string instance = string.Empty;
		int multipleSet = 0;
		bool enableRetries = false;
		object[] connectionDetails = new object[] { elementId, ipPort, multipleSet, instance, connectionId, setCommunityString, enableRetries, dmaId };

		string systemContactOid = "1.3.6.1.2.1.1.4.0";
		string[] oidInfo = new string[] { systemContactOid };

		// Different ways to define NT
		protocol.NotifyProtocol(292, connectionDetails, oidInfo);
		protocol.NotifyProtocol(290 + 10 - 8, connectionDetails, oidInfo);

		protocol.NotifyProtocol(NT_SNMP_SET_Const, connectionDetails, oidInfo);
		protocol.NotifyProtocol(NT_SNMP_SET_Int, connectionDetails, oidInfo);
		protocol.NotifyProtocol(NT_SNMP_SET_Math + 2, connectionDetails, oidInfo);
		protocol.NotifyProtocol(MyClass.NT_SNMP_SET_GlobalConst, connectionDetails, oidInfo);

		protocol.NotifyProtocol((int)NT_SNMP_SET_Const, connectionDetails, oidInfo);
		protocol.NotifyProtocol((int)NT_SNMP_SET_Int, connectionDetails, oidInfo);
		protocol.NotifyProtocol((int)NT_SNMP_SET_Math + 2, connectionDetails, oidInfo);
		protocol.NotifyProtocol((int)MyClass.NT_SNMP_SET_GlobalConst, connectionDetails, oidInfo);
		protocol.NotifyProtocol((int)NotifyType.NT_SNMP_SET, connectionDetails, oidInfo);
		
		//protocol.NotifyProtocolQueued(292, connectionDetails, oidInfo);
	}
}]]>
		</QAction>
		<QAction id="101" name="Defining_Element" encoding="csharp">
			<![CDATA[using Skyline.DataMiner.Scripting;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		int dmaId = 200;
		int elementId = 661;
		int connectionId = 0;
		string ipPort = "127.0.0.1";
		string setCommunityString = null;
		string instance = "";
		int multipleSet = 0;
		bool enableRetries = false;

		object[] connectionDetails = new object[] { elementId, ipPort, multipleSet, instance, connectionId, setCommunityString, enableRetries, dmaId };
		object[] connectionDetails_hardcoded = { 661, "127.0.0.1", 0, "", 0, null, false, 200 };

		object[] connectionDetails_multiline;
		connectionDetails_multiline = new object[] { 661, "127.0.0.1", 0, "", 0, null, false, 200 };

		string systemContactOid = "1.3.6.1.2.1.1.4.0";
		string[] oidInfo = new string[] { systemContactOid };

		// Different ways to define the SNMP element connection
		//protocol.NotifyProtocol(292, new[] { 661, "127.0.0.1", 0, "", 0, null, false, 200 }, systemContactOid);
		protocol.NotifyProtocol(292, new object[] { 661, "127.0.0.1", 0, "", 0, null, false, 200 }, systemContactOid);

		//protocol.NotifyProtocol(292, new[] { elementId, ipPort, multipleGet, instance, connectionId, getCommunityString, splitErrors, dmaId }, systemContactOid);
		protocol.NotifyProtocol(292, new object[] { elementId, ipPort, multipleSet, instance, connectionId, setCommunityString, enableRetries, dmaId }, systemContactOid);

		protocol.NotifyProtocol(292, connectionDetails, systemContactOid);
		protocol.NotifyProtocol(292, connectionDetails_hardcoded, systemContactOid);
		protocol.NotifyProtocol(292, connectionDetails_multiline, systemContactOid);
	}
}]]>
		</QAction>
		<QAction id="102" name="Processing_Result" encoding="csharp">
			<![CDATA[using System;

using Skyline.DataMiner.Scripting;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		int dmaId = 200;
		int elementId = 661;
		int connectionId = 0;
		string ipPort = "127.0.0.1";
		string setCommunityString = null;
		string instance = string.Empty;
		int multipleSet = 0;
		bool enableRetries = false;
		object[] connectionDetails = new object[] { elementId, ipPort, multipleSet, instance, connectionId, setCommunityString, enableRetries, dmaId };

		string systemContactOid = "1.3.6.1.2.1.1.4.0";
		string[] oidInfo = new string[] { systemContactOid };

		object[] result = (object[])protocol.NotifyProtocol(292, connectionDetails, oidInfo);
		if (result != null && result.Length > 0)
		{
			protocol.Log("result '" + String.Join(";", result) + "'", LogType.DebugInfo, LogLevel.NoLogging);
		}
	}

	public static void Testing(SLProtocol protocol)
	{
		object[] oaParams = (object[])protocol.GetParameters(
			new UInt32[]
			{
				6281,
				15
			});
		double val = Convert.ToDouble(oaParams[0]);

		int iTable = 6000;
		int size = protocol.RowCount(iTable);

		string ip = Convert.ToString(oaParams[1]);
		//string ip1 = ip.Split(';')[1];

		//string sPollingIp = Convert.ToString(protocol.GetParameter(3010));
		Object[] oElementInfoSet = new Object[5];
		oElementInfoSet[0] = protocol.ElementID;                //integer containing the elementid
		oElementInfoSet[1] = ip;                        //string containing the IP address (this could also be IP:Port)
		oElementInfoSet[2] = 0;              //integer containing if it should be multipleset or not (0 false, 1 true), do NOT assign a Boolean this won’t work
		oElementInfoSet[3] = "";      //string containing the instance, when there is no instance then an empty string (“”) needs to be assigned leaving this null will give errors
		oElementInfoSet[4] = 0;            //integer containing the connection that should be used (normally 0)

		Object[] oOIDs = new Object[size];
		string[] PKs = protocol.GetKeys(iTable);


		for (int i = 0; i < size; i++)
		{
			//object[] iAlarmid = (object[])protocol.GetRow(iTable,i);
			string sInstance = PKs[i];
			string sOid = "1.3.6.1.4.1.318.1.1.12.3.3.1.1.4." + sInstance;
			Object[] oOID1 = new Object[3];
			oOID1[0] = sOid;        //string containing the oid that needs to be set
			oOID1[1] = val;         //string, double containing the value that needs to be set
			oOID1[2] = 1;
			oOIDs[i] = oOID1;
		}
		Object[] oResult = (Object[])protocol.NotifyProtocol(292/*NT_SNMP_SET*/, oElementInfoSet, oOIDs);

		protocol.CheckTrigger(6004);
	}
}]]>
		</QAction>
	</QActions>

</Protocol>