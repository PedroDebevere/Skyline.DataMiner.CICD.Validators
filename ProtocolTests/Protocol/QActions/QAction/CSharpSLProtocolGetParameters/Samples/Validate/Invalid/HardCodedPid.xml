<Protocol xmlns="http://www.skyline.be/validatorProtocolUnitTest">
	<Name>GetParameters_HardCodedPid</Name>
	<Version>1.0.0.1</Version>

	<Params>
		<Param id="100">
			<Name>ReadParam_100</Name>
			<Type>read</Type>
		</Param>

		<Param id="200">
			<Name>WriteParam_200</Name>
			<Type>write</Type>
		</Param>

		<Param id="300">
			<Name>ReadWriteParam_300_350</Name>
			<Type>read</Type>
		</Param>
		<Param id="350">
			<Name>ReadWriteParam_300_350</Name>
			<Type>write</Type>
		</Param>
	</Params>

	<QActions>
		<QAction id="1" name="PreCompile" encoding="csharp" options="precompile">
			<![CDATA[using Skyline.DataMiner.Scripting;

namespace Skyline.Protocol
{
	namespace MyNamespace
	{
		public static class MyClass
		{
			public static object[] GetParametersWrapper(this SLProtocol protocol, uint[] paramIds)
			{
				return (object[])protocol.GetParameters(paramIds);
			}
		}

		public static class MyParams
		{
			public const int MyReadParam_100 = 100;
			public const int MyWriteParam_200 = 200;
			public const int MyReadWriteParam_300 = 300;
			public const int MyReadWriteParam_350 = 350;
		}
	}
}]]>
		</QAction>
		<QAction id="101" name="GetParameters" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System.Collections.Generic;

using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		uint pid = 200;
		object[] returnedValues;

		// Hard-coded
		returnedValues = (object[])protocol.GetParameters(new uint[] { Parameter.readparam_100, Parameter.Write.writeparam_200, 100 });
		
		// Local var (pid)
		uint[] pidsToGet2 = new uint[] { pid, Parameter.Write.writeparam_200, Parameter.readwriteparam_300_350 };
		returnedValues = (object[])protocol.GetParameters(pidsToGet2);

		// Imported var (MyParams)
		object pidsToGet = new uint[] { Parameter.readparam_100, MyParams.MyReadWriteParam_300, Parameter.readwriteparam_300_350 };
		returnedValues = (object[])protocol.GetParameters(pidsToGet);

		// var: List<uint> to array (not yet supported)
		List<uint> pidsToGetAsList = new List<uint> { Parameter.readparam_100, 350 };
		returnedValues = (object[])protocol.GetParameters(pidsToGetAsList.ToArray());
	}
}]]>
		</QAction>
		<QAction id="102" name="GetParametersWrapper" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System.Collections.Generic;

using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		uint pid = 200;
		object[] returnedValues;

		// Hard-coded
		returnedValues = (object[])protocol.GetParametersWrapper(new uint[] { Parameter.readparam_100, Parameter.Write.writeparam_200, 100 });

		// Local var (pid)
		uint[] pidsToGet2 = new uint[] { pid, Parameter.Write.writeparam_200, Parameter.readwriteparam_300_350 };
		returnedValues = (object[])protocol.GetParametersWrapper(pidsToGet2);

		// Imported var (MyParams)
		uint[] pidsToGet = new uint[] { Parameter.readparam_100, MyParams.MyReadWriteParam_300, Parameter.readwriteparam_300_350 };
		returnedValues = (object[])protocol.GetParametersWrapper(pidsToGet);

		// var: List<uint> to array (not yet supported)
		List<uint> pidsToGetAsList = new List<uint> { Parameter.readparam_100, 350 };
		returnedValues = (object[])protocol.GetParametersWrapper(pidsToGetAsList.ToArray());
	}
}]]>
		</QAction>
	</QActions>

</Protocol>