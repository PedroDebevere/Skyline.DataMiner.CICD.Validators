<Protocol xmlns="http://www.skyline.be/validatorProtocolUnitTest">
	<Name>CSharpNotifyDataMinerNTGetValue_DeltIncompatible</Name>
	<Version>1.0.0.1</Version>

	<QActions>
		<QAction id="1" name="PreCompile" encoding="csharp" options="precompile">
			<![CDATA[using Skyline.DataMiner.Scripting;

namespace Skyline.Protocol
{
	namespace MyNamespace
	{
		public static class MyClass
		{
			public const int NT_GET_VALUE_GlobalConst = 69;
		}
	}
}]]>
		</QAction>

		<QAction id="100" name="Defining_NotifyType" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using Skyline.DataMiner.Net.Messages;
using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		const int NT_GET_VALUE_Const = 69;
		int NT_GET_VALUE_Int = 69;
		int NT_GET_VALUE_Math = 60;

		uint elementId = 661;
		uint[] elementDetails = { elementId };

		int pid = 100;

		// Different ways to define NT
		protocol.NotifyDataMiner(69, elementDetails, pid);
		protocol.NotifyDataMiner(60 + 10 - 1, elementDetails, pid);

		protocol.NotifyDataMiner(NT_GET_VALUE_Const, elementDetails, pid);
		protocol.NotifyDataMiner(NT_GET_VALUE_Int, elementDetails, pid);
		//protocol.NotifyDataMiner(NT_GET_VALUE_Math + 9, elementDetails, pid);
		protocol.NotifyDataMiner(MyClass.NT_GET_VALUE_GlobalConst, elementDetails, pid);

		protocol.NotifyDataMiner((int)NT_GET_VALUE_Const, elementDetails, pid);
		protocol.NotifyDataMiner((int)NT_GET_VALUE_Int, elementDetails, pid);
		//protocol.NotifyDataMiner((int)NT_GET_VALUE_Math + 9, elementDetails, pid);
		protocol.NotifyDataMiner((int)MyClass.NT_GET_VALUE_GlobalConst, elementDetails, pid);
		protocol.NotifyDataMiner((int)NotifyType.GetValue, elementDetails, pid);
		
		protocol.NotifyDataMinerQueued(69, elementDetails, pid);
	}
}]]>
		</QAction>
		<QAction id="101" name="Defining_Element" encoding="csharp">
			<![CDATA[using Skyline.DataMiner.Scripting;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		uint elementId = 661;
		int elementId_int = 661;
		string elementId_string = "661";

		uint[] elementDetails = { elementId };
		uint[] elementDetails_hardcoded = { 2 };

		uint[] elementDetails_multiline;
		elementDetails_multiline = new uint[] { 2 };

		uint pid = 100;

		// Different ways to define the parameter
		protocol.NotifyDataMiner(69, 2, pid);
		protocol.NotifyDataMiner(69, elementId, pid);
		protocol.NotifyDataMiner(69, elementId_int, pid);
		protocol.NotifyDataMiner(69, elementId_string, pid);

		protocol.NotifyDataMiner(69, new[] { 2 }, pid);
		protocol.NotifyDataMiner(69, new uint[] { 2 }, pid);
		protocol.NotifyDataMiner(69, new[] { elementId }, pid);
		protocol.NotifyDataMiner(69, new uint[] { elementId }, pid);

		protocol.NotifyDataMiner(69, elementDetails, pid);
		protocol.NotifyDataMiner(69, elementDetails_hardcoded, pid);
		//protocol.NotifyDataMiner(69, elementDetails_multiline, pid);
	}
}]]>
		</QAction>
		<QAction id="102" name="Processing_Result" encoding="csharp">
			<![CDATA[using System;

using Skyline.DataMiner.Scripting;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		uint elementId = 661;
		uint[] elementDetails = { elementId };

		uint pid = 100;

		object[] result = (object[])protocol.NotifyDataMiner(69, elementDetails, pid);
		if (result != null && result.Length > 0)
		{
			object paramValue = result[4];
			protocol.Log("QA" + protocol.QActionID + "|Run|paramValue '" + paramValue + "'", LogType.DebugInfo, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
	</QActions>

</Protocol>