<Protocol xmlns="http://www.skyline.be/validatorProtocolUnitTest">
	<Name>CSharpSLProtocolCheckTrigger_NonExistingTrigger</Name>
	<Version>1.0.0.1</Version>
	
	<QActions>
		<QAction id="1" name="PreCompile" encoding="csharp" options="precompile">
			<![CDATA[using Skyline.DataMiner.Scripting;

namespace Skyline.Protocol
{
	namespace MyNamespace
	{
		public static class MyClass
		{
			public static void CheckTriggerWrapper(this SLProtocol protocol, int triggerId)
			{
				protocol.CheckTrigger(triggerId);
			}
		}

		public static class Triggers
		{
			public const int MyTrigger_10 = 10;
			public const int MyTrigger_11 = 11;
		}
	}
}]]>
		</QAction>
		<QAction id="100" name="CheckTrigger_10" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

/// <summary>
/// DataMiner QAction Class: Simple_CheckTrigger_10.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		int triggerId = 5 + 9;

		protocol.CheckTrigger(10);
		protocol.CheckTrigger(10);
		protocol.CheckTrigger(11);

		protocol.CheckTrigger(5 + 10);
		protocol.CheckTrigger(triggerId);
		protocol.CheckTrigger(Triggers.MyTrigger_10);

		protocol.CheckTriggerWrapper(12);						// Not (yet) covered
		protocol.CheckTriggerWrapper(5 + 15);					// Not (yet) covered
		protocol.CheckTriggerWrapper(triggerId);				// Not (yet) covered
		protocol.CheckTriggerWrapper(Triggers.MyTrigger_10);    // Not (yet) covered

	}
}]]>
		</QAction>
	</QActions>
	
</Protocol>