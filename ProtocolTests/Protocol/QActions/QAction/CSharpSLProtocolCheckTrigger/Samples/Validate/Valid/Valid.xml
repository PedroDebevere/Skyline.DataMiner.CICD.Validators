<Protocol xmlns="http://www.skyline.be/validatorProtocolUnitTest">
	<Name>CSharpSLProtocolCheckTrigger_Valid</Name>
	<Version>0.0.0.0</Version>
	
	<QActions>
		<QAction id="1" name="PreCompile" encoding="csharp" options="precompile">
			<![CDATA[using System;
using System.Linq.Expressions;
using Skyline.DataMiner.Scripting;

namespace Skyline.Protocol
{
	namespace MyNamespace
	{
		public static class MyClass
		{
			public static void CheckTriggerWrapper(this SLProtocol protocol, int triggerId)
			{
				protocol.CheckTrigger(triggerId);
			}
		}

		public static class Triggers
		{
			public const int MyTrigger_10 = 10;
			public const int MyTrigger_11 = 11;
		}

		public class Test
		{
			/// <summary>
			/// Performs a query using IMS Inventory Service
			/// </summary>
			/// <typeparam name="TResult">Result Type</typeparam>
			/// <param name="query">Query to perform</param>
			/// <param name="processing">Action with extra processing</param>
			/// <param name="pollingTask">IMS Polling Task</param>
			/// <param name="ids">IEnumerable&lt;string&gt; object with the ids of the objects to query</param>
			public void GetInventory<TResult>(
				Expression<Func<Guid, object, string, TResult>> query)
				where TResult : class
			{
				Guid token = Guid.NewGuid();
				string channel = "channel";
				string id = "id";

				var result = query.Compile()(token, channel, id);
			}
		}
	}
}]]>
		</QAction>
		<QAction id="100" name="CheckTrigger_10" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

/// <summary>
/// DataMiner QAction Class: Simple_CheckTrigger_10.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		int triggerId = 5 + 5;

		protocol.CheckTrigger(10);
		protocol.CheckTrigger(5 + 5);
		protocol.CheckTrigger(triggerId);
		protocol.CheckTrigger(Triggers.MyTrigger_10);

		// Not yet covered
		protocol.CheckTriggerWrapper(10);
		protocol.CheckTriggerWrapper(5 + 5);
		protocol.CheckTriggerWrapper(triggerId);
		protocol.CheckTriggerWrapper(Triggers.MyTrigger_10);
	}
}]]>
		</QAction>
	</QActions>

	<Triggers>
		<Trigger id="10">
			<Name>CheckTrigger_10</Name>
		</Trigger>
	</Triggers>
	
</Protocol>