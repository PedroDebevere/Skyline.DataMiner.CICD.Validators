<Protocol xmlns="http://www.skyline.be/validatorProtocolUnitTest">
	<Name>CSharpNotifyDataMinerNTUpdatePortsXml_Valid</Name>
	<Version>1.0.0.1</Version>

	<QActions>
		<QAction id="1" name="PreCompile" encoding="csharp" options="precompile">
			<![CDATA[using Skyline.DataMiner.Scripting;

namespace Skyline.Protocol
{
	namespace MyNamespace
	{
		public static class MyClass
		{
			public const int NT_UPDATE_PORTS_XML_GlobalConst = 128;
		}
	}
}]]>
		</QAction>

		<QAction id="100" name="Defining_NotifyType" encoding="csharp" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using Skyline.DataMiner.Net.Messages;
using Skyline.DataMiner.Scripting;
using Skyline.Protocol.MyNamespace;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		const int NT_UPDATE_PORTS_XML_Const = 128;
		int NT_UPDATE_PORTS_XML_Int = 128;
		int NT_UPDATE_PORTS_XML_Math = 120;

		int dmaId = 10;
		int elementId = 161;
		int pid = 1000;
		int changeType = 9;
		string updateConfig = changeType + ";" + elementId + ";" + pid + ";" + dmaId;

		int updateInputs = 8;
		int updateOutputs = 8;
		string updateValues = updateInputs + ";" + updateOutputs;

		// Different ways to define NT
		protocol.NotifyDataMiner(128, updateConfig, updateValues);
		protocol.NotifyDataMiner(120 + 10 - 2, updateConfig, updateValues);

		protocol.NotifyDataMiner(NT_UPDATE_PORTS_XML_Const, updateConfig, updateValues);
		protocol.NotifyDataMiner(NT_UPDATE_PORTS_XML_Int, updateConfig, updateValues);
		protocol.NotifyDataMiner(NT_UPDATE_PORTS_XML_Math + 8, updateConfig, updateValues);
		protocol.NotifyDataMiner(MyClass.NT_UPDATE_PORTS_XML_GlobalConst, updateConfig, updateValues);

		protocol.NotifyDataMiner((int)NT_UPDATE_PORTS_XML_Const, updateConfig, updateValues);
		protocol.NotifyDataMiner((int)NT_UPDATE_PORTS_XML_Int, updateConfig, updateValues);
		protocol.NotifyDataMiner((int)NT_UPDATE_PORTS_XML_Math + 8, updateConfig, updateValues);
		protocol.NotifyDataMiner((int)MyClass.NT_UPDATE_PORTS_XML_GlobalConst, updateConfig, updateValues);
		protocol.NotifyDataMiner((int)NotifyType.UpdatePortsXml, updateConfig, updateValues);
		
		protocol.NotifyDataMinerQueued(128, updateConfig, updateValues);
	}
}]]>
		</QAction>
		<QAction id="101" name="Defining_Element" encoding="csharp">
			<![CDATA[using Skyline.DataMiner.Scripting;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		int dmaId = 10;
		int elementId = 161;
		int pid = 1000;
		int changeType = 9;

		string elementDetails = "9;161;1000;10";
		string elementDetails_var = changeType + ";" + elementId + ";" + pid + ";" + dmaId;
		string elementDetails_var_protocol = changeType + ";" + protocol.ElementID + ";" + pid + ";" + dmaId;

		string elementDetails_multiline_lit;
		elementDetails_multiline_lit = "9;161;1000;10";

		string elementDetails_multiline_var;
		elementDetails_multiline_var = changeType + ";" + elementId + ";" + pid + ";" + dmaId;

		string elementDetails_multiline_var2 = "";
		elementDetails_multiline_var2 += changeType;
		elementDetails_multiline_var2 += ";";
		elementDetails_multiline_var2 += elementId;
		elementDetails_multiline_var2 += ";";
		elementDetails_multiline_var2 += pid;
		elementDetails_multiline_var2 += ";";
		elementDetails_multiline_var2 += dmaId;

		int updateInputs = 8;
		int updateOutputs = 8;
		string updateValues = updateInputs + ";" + updateOutputs;

		// Different ways to define element
		protocol.NotifyDataMiner(128, "9;161;1000;10", updateValues);
		protocol.NotifyDataMiner(128, changeType + ";" + elementId + ";" + pid + ";" + dmaId, updateValues);
		protocol.NotifyDataMiner(128, elementDetails, updateValues);
		protocol.NotifyDataMiner(128, elementDetails_var, updateValues);
		protocol.NotifyDataMiner(128, elementDetails_var_protocol, updateValues);

		protocol.NotifyDataMiner(128, elementDetails_multiline_lit, updateValues);
		protocol.NotifyDataMiner(128, elementDetails_multiline_var, updateValues);
		protocol.NotifyDataMiner(128, elementDetails_multiline_var2, updateValues);
	}
}]]>
		</QAction>
	<QAction id="102" name="Processing_Result" encoding="csharp">
			<![CDATA[using System;

using Skyline.DataMiner.Scripting;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		int dmaId = 10;
		int elementId = 161;
		int pid = 1000;
		int changeType = 9;
		string updateConfig = changeType + ";" + elementId + ";" + pid + ";" + dmaId;

		int updateInputs = 8;
		int updateOutputs = 8;
		string updateValues = updateInputs + ";" + updateOutputs;

		int result = (int)protocol.NotifyDataMinerQueued(128, updateConfig, updateValues);
		protocol.Log("result '" + result + "'", LogType.DebugInfo, LogLevel.NoLogging);
	}
}]]>
		</QAction>
		<QAction id="103" name="BulkCall" encoding="csharp">
			<![CDATA[using System;

using Skyline.DataMiner.Scripting;

public class QAction
{
	public static void Run(SLProtocol protocol)
	{
		int dmaId = 10;
		int elementId = 161;
		int pid = 1000;
		int changeType = 9;     // 9:Size
		string updateConfig1 = changeType + ";" + elementId + ";" + pid + ";" + dmaId;

		int changeType2 = 0;    // 0:Label
		object[] updateConfigs = new object[]
		{
			updateConfig1,
			changeType2 + ";" + elementId + ";" + pid + ";" + dmaId,
		};

		int updateInputs = 8;
		int updateOutputs = 8;
		string updateSize = updateInputs + ";" + updateOutputs;

		string updateLabel = "1;newLabel";
		object[] updateValues = new object[]
		{
			updateSize,
			updateLabel,
		};

		int result = (int)protocol.NotifyDataMinerQueued(128, updateConfigs, updateValues);
		protocol.Log("result '" + result + "'", LogType.DebugInfo, LogLevel.NoLogging);
	}
}]]>
		</QAction>
	</QActions>

</Protocol>