namespace SLDisUnitTestsShared
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    using System.Threading;

    using Skyline.DataMiner.CICD.Validators.Common.Interfaces;
    using Skyline.DataMiner.Scripting;

    public class ProtocolQActionHelperProvider : IProtocolQActionHelperProvider
    {
	    private const string AutoGeneratedCodeByDis = "// <auto-generated>This is auto-generated code by DIS. Do not modify.</auto-generated>";
        private static readonly Mutex _mutex;

        static ProtocolQActionHelperProvider()
        {
            string mutexId = $"Global\\{typeof(ProtocolQActionHelperProvider).GUID}";
            _mutex = new Mutex(false, mutexId);
        }

        public string GetProtocolQActionHelper(string protocolCode, bool ignoreErrors = false)
        {
            var tempPath = Path.GetTempPath();
            var tempName = Guid.NewGuid().ToString("N");
            var tempFile = Path.Combine(tempPath, tempName + ".txt");

            List<XMLParseError> result;

            // prevent System.IO.IOException: The process cannot access the file 'C:\Skyline DataMiner\logging\SLQActionHelper.txt'
            try
            {
                _mutex.WaitOne();
                result = QActionHelper.CreateProtocolQActionHelperFromString(protocolCode, tempPath, tempName);
            }
            finally
            {
                _mutex.ReleaseMutex();
            }

            if (!ignoreErrors && result != null && result.Count > 0)
            {
                StringBuilder error = new StringBuilder();
                error.Append("Couldn't generate QAction helper:");

                foreach (var err in result)
                {
                    error.Append("\n    Line " + err.Line + ": " + err.Description);
                }

                throw new Exception(error.ToString());
            }

            var csContent = new StringBuilder();
            csContent.AppendLine(AutoGeneratedCodeByDis);

            if (File.Exists(tempFile))
            {
                csContent.Append(File.ReadAllText(tempFile));
                File.Delete(tempFile);
            }
            else
            {
                csContent.Append("namespace Skyline.DataMiner.Scripting { public class SLProtocolExt : SLProtocol { } }");
            }

            return csContent.ToString();
        }
    }
}
