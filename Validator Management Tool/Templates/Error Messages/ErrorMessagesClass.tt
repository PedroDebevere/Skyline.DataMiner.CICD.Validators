<#@ template language="C#" linePragmas="false" #>
// <auto-generated>This is auto-generated code by Validator Management Tool. Do not modify.</auto-generated>
namespace Skyline.DataMiner.CICD.Validators.Protocol.Tests.<#= @namespace #>
{
    using System;
    using System.Collections.Generic;

    using Skyline.DataMiner.CICD.Models.Protocol.Read;
    using Skyline.DataMiner.CICD.Validators.Common.Interfaces;
    using Skyline.DataMiner.CICD.Validators.Common.Model;
    using Skyline.DataMiner.CICD.Validators.Protocol.Common;
    using Skyline.DataMiner.CICD.Validators.Protocol.Interfaces;

<# if(checks.Count > 0){ #>
    internal static class Error
    {<# foreach(var check in checks) {#>

        public static IValidationResult <#= check.Name #>(IValidate test, IReadable referenceNode, IReadable positionNode<# foreach(var argument in argumentLists[check.Name]) { #>, <#= argument.Value #> <#= argument.Key #><# } #>)
        {
            return new ValidationResult
            {
                Test = test,
<# foreach(var property in propertyLists[check.Name])
{ #>
                <#= property.Key #> = <#= property.Value #>,
<# } #>

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
<# if (check.AutoFixWarnings.Count != 0)
{ #>

                AutoFixWarnings = new List<(string, bool)>
                {
<# foreach(var warning in warningLists[check.Name])
{ #>
                    ("<#= warning.Key #>", <#= warning.Value #>),
<# } #>
                }
<# } #>
            };
        }
<# } #>
    }
<# } #>

<# if(compares.Count > 0){ #>
    internal static class ErrorCompare
    {<# foreach(var compare in compares) {#>

        public static IValidationResult <#= compare.Name #>(IReadable referenceNode, IReadable positionNode<# foreach(var argument in argumentLists[compare.Name]) { #>, <#= argument.Value #> <#= argument.Key #><# } #>)
        {
            return new ValidationResult
            {
                Test = null,
<# foreach(var property in propertyLists[compare.Name])
{ #>
                <#= property.Key #> = <#= property.Value #>,
<# } #>

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }
<# } #>
    }

<# } #>
    internal static class ErrorIds
    {
<# foreach(var check in allChecks) { #>
        public const uint <#= check.Name #> = <#= check.ErrorId #>;
<#}#>
    }

    /// <summary>
    /// Contains the identifiers of the checks.
    /// </summary>
    public static class CheckId
    {
        /// <summary>
        /// The check identifier.
        /// </summary>
        public const uint <#= allChecks[0].CheckName #> = <#= allChecks[0].CheckId #>;
    }
}