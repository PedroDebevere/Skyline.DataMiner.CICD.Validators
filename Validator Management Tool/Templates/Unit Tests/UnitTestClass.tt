<#@ template language="C#" linePragmas="false" #>
namespace ProtocolTests.<#= @namespace #>
{
    using System;
    using System.Collections.Generic;

    using FluentAssertions;

    using Microsoft.VisualStudio.TestTools.UnitTesting;
    
    using Skyline.DataMiner.CICD.Validators.Common.Interfaces;
    using Skyline.DataMiner.CICD.Validators.Common.Model;
    using Skyline.DataMiner.CICD.Validators.Protocol.Common;
    using Skyline.DataMiner.CICD.Validators.Protocol.Interfaces;
    using Skyline.DataMiner.CICD.Validators.Protocol.Tests.<#= @namespace #>;

<# if(validateChecks.Count > 0){ #>
    [TestClass]
    public class Validate
    {
        private readonly IValidate check = new <#= className #>();

        #region Valid Checks

        [TestMethod]
        [Ignore]
        public void <#= validateChecks[0].check.Category #>_<#= className #>_Valid()
        {
            Generic.ValidateData data = new Generic.ValidateData
            {
                TestType = Generic.TestType.Valid,
                FileName = "Valid",
                ExpectedResults = new List<IValidationResult>()
            };

            Generic.Validate(check, data);
        }

        #endregion

        #region Invalid Checks
<# foreach (var (hasArgs, args, _, check) in validateChecks) { #>

        [TestMethod]
        [Ignore]
        public void <#= check.Category #>_<#= className #>_<#= check.Name #>()
        {
            Generic.ValidateData data = new Generic.ValidateData
            {
                TestType = Generic.TestType.Invalid,
                FileName = "<#= check.Name #>",
                ExpectedResults = new List<IValidationResult>
                {
<# if (hasArgs) {#>
                    //Error.<#= check.Name #>(null, null, null, <#= args #>),
<# } else { #>
                    //Error.<#= check.Name #>(null, null, null),
<# } #>
                }
            };

            Generic.Validate(check, data);
        }
<# } #>

        #endregion
    }

<# } #>
<# if(compareChecks.Count > 0){ #>
    [TestClass]
    public class Compare
    {
        private readonly ICompare check = new <#= className #>();
        
        #region Valid Checks

        [TestMethod]
        [Ignore]
        public void <#= compareChecks[0].check.Category #>_<#= className #>_Valid()
        {
            Generic.CompareData data = new Generic.CompareData
            {
                TestType = Generic.TestType.Valid,
                FileNameBase = "Valid",
                ExpectedResults = new List<IValidationResult>()
            };

            Generic.Compare(check, data);
        }

        #endregion

        #region Invalid Checks
<# foreach (var (hasArgs, args, _, check) in compareChecks) { #>

        [TestMethod]
        [Ignore]
        public void <#= check.Category #>_<#= className #>_<#= check.Name #>()
        {
            Generic.CompareData data = new Generic.CompareData
            {
                TestType = Generic.TestType.Invalid,
                FileNameBase = "<#= check.Name #>",
                ExpectedResults = new List<IValidationResult>
                {
<# if (hasArgs) {#>
                    //ErrorCompare.<#= check.Name #>(null, null, <#= args #>),
<# } else { #>
                    //ErrorCompare.<#= check.Name #>(null, null),
<# } #>
                }
            };

            Generic.Compare(check, data);
        }
<# } #>

        #endregion
    }

<# } #>
<# if(codefixes.Count > 0){ #>
    [TestClass]
    public class CodeFix
    {
        private readonly ICodeFix check = new <#= className #>();
<# foreach (var check in codefixes) { #>

        [TestMethod]
        [Ignore]
        public void <#= codefixes[0].Category #>_<#= className #>_<#= check.Name #>()
        {
            Generic.FixData data = new Generic.FixData
            {
                FileNameBase = "<#= check.Name #>",
            };

            Generic.Fix(check, data);
        }
<# } #>
    }

<# } #>
<# if(allChecks.Count > 0){ #>
    [TestClass]
    public class ErrorMessages
    {
<# for (int i = 0; i < validateChecks.Count;i++) {
var (hasArgs, args, props, check) = validateChecks[i];
if (i != 0){
#>

<#
}
#>
        [TestMethod]
        [Ignore]
        public void <#= check.Category #>_<#= className #>_<#= check.Name #>()
        {
            // Create ErrorMessage
            <# if (hasArgs) {#>var message = Error.<#= check.Name #>(null, null, null, <#= args #>);
            <# } else { #>var message = Error.<#= check.Name #>(null, null, null);
            <# } #>
            
            var expected = new ValidationResult
            {
<# foreach(var property in props)
{
    if (ExcludedProperties.Contains(property.Key)) continue;
#>
                <#= property.Key #> = <#= property.Value #>,
<# } #>
            };

            // Assert
            message.Should().BeEquivalentTo(expected, Generic.ExcludePropertiesForErrorMessages);
        }
<# } #>
<# for (int i = 0; i < compareChecks.Count;i++) {
var (hasArgs, args, props, check) = compareChecks[i];
if (i != 0 || validateChecks.Count > 0){
#>

<#
}
#>
        [TestMethod]
        [Ignore]
        public void <#= check.Category #>_<#= className #>_<#= check.Name #>()
        {
            // Create ErrorMessage
            <# if (hasArgs) {#>var message = ErrorCompare.<#= check.Name #>(null, null, <#= args #>);
            <# } else { #>var message = ErrorCompare.<#= check.Name #>(null, null);
            <# } #>
            
            var expected = new ValidationResult()
            {
<# foreach(var property in props)
{ #>
                <#= property.Key #> = <#= property.Value #>,
<# } #>
            };

            // Assert
            message.Should().BeEquivalentTo(expected, Generic.ExcludePropertiesForErrorMessages);
        }
<# } #>
    }

<# } #>
<# if(allChecks.Count > 0){ #>
    [TestClass]
    [Ignore]
    public class Attribute
    {
        private readonly IRoot check = new <#= className #>();

        [TestMethod]
        public void <#= allChecks[0].Category #>_<#= className #>_CheckCategory() => Generic.CheckCategory(check, Category.<#= allChecks[0].Category #>);

        [TestMethod]
        public void <#= allChecks[0].Category #>_<#= className #>_CheckId() => Generic.CheckId(check, CheckId.<#= className #>);
    }
<# } #>
}